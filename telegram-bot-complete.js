const TelegramBot = require('node-telegram-bot-api');
const { createClient } = require('@supabase/supabase-js');

// ============= CONFIGURA√á√ïES =============
// Substitua pelos seus dados reais
const TELEGRAM_BOT_TOKEN = '8256668487:AAHwhFCR_2RGsAE7Cv6TdeEbWZKgpFTr6Og';
const TELEGRAM_CHAT_ID = '-4802207865'; // ID do seu grupo
const SUPABASE_URL = 'https://zdtuvslyqayjedjsfvwa.supabase.co';
const SUPABASE_SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpkdHV2c2x5cWF5amVkanNmdndhIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0MzgzNTU2MiwiZXhwIjoyMDU5NDExNTYyfQ.Nz4rjfhWh6AiGHQNxb9LO8nG05jLojWV7_BZkEcBG5g';

// ============= INICIALIZA√á√ÉO =============
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

console.log('ü§ñ Bot Telegram iniciado com sucesso!');
console.log('üìû Monitorando grupo:', TELEGRAM_CHAT_ID);
console.log('üìä Conectado ao Supabase:', SUPABASE_URL);

// ============= CONTROLE DE FLOOD =============
const userLastAction = new Map();
const FLOOD_TIMEOUT = 3000; // 3 segundos entre a√ß√µes

function checkFlood(userId) {
    const now = Date.now();
    const lastAction = userLastAction.get(userId);
    
    if (lastAction && (now - lastAction) < FLOOD_TIMEOUT) {
        return true; // √â flood
    }
    
    userLastAction.set(userId, now);
    return false; // N√£o √© flood
}

// ============= FUNCIONALIDADES PRINCIPAIS =============

// Comando /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, 
        'ü§ñ *Bot de Pedidos Ativo!*\n\n' +
        '‚úÖ Sistema integrado com Supabase\n' +
        'üîÑ Atualiza√ß√µes em tempo real\n' +
        'üì± Controle de status por bot√µes\n\n' +
        '*Comandos dispon√≠veis:*\n' +
        '/test - Testar bot√µes\n' +
        '/status - Ver status do sistema\n' +
        '/help - Ajuda',
        { parse_mode: 'Markdown' }
    );
});

// Comando /status
bot.onText(/\/status/, async (msg) => {
    const chatId = msg.chat.id;
    
    try {
        // Buscar pedidos pendentes
        const { data: pendentes, error: errorPendentes } = await supabase
            .from('pedidos')
            .select('*')
            .eq('status', 'pendente');
            
        const { data: preparando, error: errorPreparando } = await supabase
            .from('pedidos')
            .select('*')
            .eq('status', 'preparando');
            
        const { data: deslocamento, error: errorDeslocamento } = await supabase
            .from('pedidos')
            .select('*')
            .eq('status', 'em_deslocamento');

        if (errorPendentes || errorPreparando || errorDeslocamento) {
            throw new Error('Erro ao buscar pedidos');
        }

        const statusMessage = 
            'üìä *STATUS DO SISTEMA*\n\n' +
            `üìù Pedidos Pendentes: ${pendentes?.length || 0}\n` +
            `üîÑ Em Produ√ß√£o: ${preparando?.length || 0}\n` +
            `üöö Em Deslocamento: ${deslocamento?.length || 0}\n\n` +
            `‚è∞ √öltima verifica√ß√£o: ${new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}`;

        bot.sendMessage(chatId, statusMessage, { parse_mode: 'Markdown' });
    } catch (error) {
        console.error('Erro ao verificar status:', error);
        bot.sendMessage(chatId, '‚ùå Erro ao verificar status do sistema');
    }
});

// Comando /test
bot.onText(/\/test/, (msg) => {
    const chatId = msg.chat.id;
    
    const inlineKeyboard = {
        inline_keyboard: [
            [
                { 
                    text: "üîÑ INICIAR PRODU√á√ÉO", 
                    callback_data: "status_preparando_TEST123" 
                }
            ],
            [
                { 
                    text: "üöö DESPACHAR PEDIDO", 
                    callback_data: "status_em_deslocamento_TEST123" 
                }
            ],
            [
                { 
                    text: "‚úÖ MARCAR ENTREGUE", 
                    callback_data: "status_entregue_TEST123" 
                }
            ],
            [
                { 
                    text: "üìû Ligar Cliente", 
                    callback_data: "call_TEST123_5511999999999" 
                }
            ]
        ]
    };
    
    bot.sendMessage(chatId, 
        'üß™ *TESTE DE BOT√ïES*\n\n' +
        'üìã Pedido: TEST123\n' +
        'üë§ Cliente: Cliente Teste\n' +
        'üí∞ Total: R$ 25,00\n\n' +
        'Use os bot√µes abaixo para testar o sistema:', 
        {
            parse_mode: 'Markdown',
            reply_markup: inlineKeyboard
        }
    );
});

// ============= PROCESSAMENTO DE PEDIDOS =============

// Monitorar novos pedidos no Supabase
async function monitorarNovos Pedidos() {
    console.log('üîç Iniciando monitoramento de pedidos...');
    
    // Configurar realtime para novos pedidos
    const channel = supabase
        .channel('new-orders')
        .on(
            'postgres_changes',
            {
                event: 'INSERT',
                schema: 'public',
                table: 'pedidos'
            },
            async (payload) => {
                console.log('üÜï Novo pedido recebido:', payload.new.codigo_pedido);
                await enviarPedidoParaTelegram(payload.new);
            }
        )
        .subscribe((status) => {
            console.log('üì° Status da conex√£o realtime:', status);
        });

    return channel;
}

// Enviar pedido formatado para o Telegram
async function enviarPedidoParaTelegram(pedido) {
    try {
        console.log('üì§ Enviando pedido para Telegram:', pedido.codigo_pedido);
        
        // Formata√ß√£o dos itens
        let itens;
        try {
            itens = typeof pedido.itens === 'string' ? JSON.parse(pedido.itens) : pedido.itens;
        } catch (e) {
            console.error('Erro ao parsear itens:', e);
            itens = [];
        }

        const itensList = itens.map((item) => {
            const fullName = item.category?.toLowerCase() === 'batidas' && !item.name.toLowerCase().includes('batida de')
                ? `Batida de ${item.name}`
                : item.name;

            const iceText = item.ice
                ? "\n   üßä Gelo: " + Object.entries(item.ice)
                    .filter(([flavor, qty]) => qty > 0)
                    .map(([flavor, qty]) => `${flavor} x${qty}`)
                    .join(", ")
                : "";

            const alcoholText = item.alcohol ? ` (ü•É √Ålcool: ${item.alcohol})` : "";
            const balyText = item.balyFlavor ? ` (üçπ Baly: ${item.balyFlavor})` : "";
            const energyDrinkText = item.energyDrink 
                ? ` (‚ö° Energ√©tico: ${item.energyDrink}${item.energyDrinkFlavor !== 'Tradicional' ? ' - ' + item.energyDrinkFlavor : ''})`
                : "";

            const itemPrice = (item.price || 0) * (item.qty || 1);
            
            return `${item.qty}x ${fullName}${alcoholText}${balyText}${energyDrinkText}${iceText}\nüí∞ R$${itemPrice.toFixed(2).replace('.', ',')}`;
        }).join('\n\n');

        // Calcular valores
        const subtotal = itens.reduce((sum, item) => sum + (item.price || 0) * (item.qty || 1), 0);
        const totalFinal = pedido.total || (subtotal + (pedido.taxa_entrega || 0));
        const trocoValue = Number(pedido.troco) || 0;
        const trocoFinal = pedido.forma_pagamento === "Dinheiro" && trocoValue > 0 ? trocoValue - totalFinal : 0;

        // Mensagem formatada
        const message = `üéØ **NOVO PEDIDO** üéØ

üìã **C√ìDIGO:** ${pedido.codigo_pedido}${pedido.entregador ? `\nüèçÔ∏è **ENTREGADOR:** ${pedido.entregador}` : ''}

üë§ **CLIENTE:**
${pedido.cliente_nome}
üì± WhatsApp: ${pedido.cliente_whatsapp}

üìç **ENDERE√áO COMPLETO:**
${pedido.cliente_endereco}, N¬∫ ${pedido.cliente_numero}${pedido.cliente_complemento ? ` - ${pedido.cliente_complemento}` : ''}
üèòÔ∏è Bairro: ${pedido.cliente_bairro}
üìç Refer√™ncia: ${pedido.cliente_referencia || 'N√£o informada'}

üõí **PEDIDO:**
${itensList || 'Sem itens'}

üí∏ **VALORES:**
üí∞ Subtotal: R$${subtotal.toFixed(2).replace('.', ',')}
üöö Taxa de Entrega: R$${(pedido.taxa_entrega || 0).toFixed(2).replace('.', ',')}${pedido.discount_amount > 0 ? `\nüéÅ Desconto: -R$${pedido.discount_amount.toFixed(2).replace('.', ',')}` : ''}
üèÜ **TOTAL: R$${totalFinal.toFixed(2).replace('.', ',')}**

üí≥ **PAGAMENTO:**
${pedido.forma_pagamento}${pedido.forma_pagamento === "Dinheiro" && trocoValue > 0 
    ? `\nüíµ Troco para: R$${trocoValue.toFixed(2).replace('.', ',')}\nüí∏ Troco a levar: R$${trocoFinal >= 0 ? trocoFinal.toFixed(2).replace('.', ',') : '0,00'}`
    : ''}

${pedido.observacao ? `üìù **OBSERVA√á√ÉO:** ${pedido.observacao}` : ''}

‚è∞ ${new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}`;

        // Bot√µes de a√ß√£o
        const inlineKeyboard = {
            inline_keyboard: [
                [
                    { 
                        text: "üîÑ INICIAR PRODU√á√ÉO", 
                        callback_data: `status_preparando_${pedido.codigo_pedido}` 
                    }
                ],
                [
                    { 
                        text: "üöö DESPACHAR PEDIDO", 
                        callback_data: `status_em_deslocamento_${pedido.codigo_pedido}` 
                    }
                ],
                [
                    { 
                        text: "‚úÖ MARCAR ENTREGUE", 
                        callback_data: `status_entregue_${pedido.codigo_pedido}` 
                    }
                ],
                [
                    { 
                        text: "üìû Ligar Cliente", 
                        callback_data: `call_${pedido.codigo_pedido}_${pedido.cliente_whatsapp}` 
                    },
                    { 
                        text: "üí¨ WhatsApp", 
                        url: `https://wa.me/${pedido.cliente_whatsapp.replace(/\D/g, '')}` 
                    }
                ]
            ]
        };

        // Enviar para o grupo
        await bot.sendMessage(TELEGRAM_CHAT_ID, message, {
            parse_mode: 'Markdown',
            reply_markup: inlineKeyboard
        });

        console.log('‚úÖ Pedido enviado com sucesso para Telegram:', pedido.codigo_pedido);
        
    } catch (error) {
        console.error('‚ùå Erro ao enviar pedido para Telegram:', error);
        
        // Enviar mensagem de erro simplificada
        try {
            await bot.sendMessage(TELEGRAM_CHAT_ID, 
                `‚ùå **ERRO AO PROCESSAR PEDIDO**\n\n` +
                `üìã C√≥digo: ${pedido.codigo_pedido}\n` +
                `üë§ Cliente: ${pedido.cliente_nome}\n` +
                `üí∞ Total: R$${(pedido.total || 0).toFixed(2).replace('.', ',')}\n\n` +
                `‚ö†Ô∏è Verifique o pedido manualmente no sistema.`,
                { parse_mode: 'Markdown' }
            );
        } catch (fallbackError) {
            console.error('‚ùå Erro ao enviar mensagem de fallback:', fallbackError);
        }
    }
}

// ============= PROCESSAMENTO DE BOT√ïES =============

bot.on('callback_query', async (callbackQuery) => {
    const callbackData = callbackQuery.data;
    const messageId = callbackQuery.message.message_id;
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const userName = callbackQuery.from.first_name || callbackQuery.from.username || 'Usu√°rio';

    console.log('üîò Callback recebido:', callbackData, 'de:', userName);

    // Verificar flood
    if (checkFlood(userId)) {
        await bot.answerCallbackQuery(callbackQuery.id, {
            text: '‚è≥ Aguarde alguns segundos antes de clicar novamente',
            show_alert: true
        });
        return;
    }

    try {
        // Processar atualiza√ß√µes de status
        if (callbackData.startsWith('status_')) {
            const parts = callbackData.split('_');
            const status = parts[1];
            const codigoPedido = parts.slice(2).join('_');

            console.log('üìä Atualizando status:', { codigoPedido, status, userName });

            // Atualizar no Supabase
            const { data, error } = await supabase
                .from('pedidos')
                .update({ status })
                .eq('codigo_pedido', codigoPedido)
                .select('id, codigo_pedido, cliente_nome, status');

            if (error) {
                console.error('‚ùå Erro ao atualizar status no Supabase:', error);
                throw error;
            }

            if (!data || data.length === 0) {
                console.error('‚ùå Pedido n√£o encontrado:', codigoPedido);
                throw new Error(`Pedido ${codigoPedido} n√£o encontrado`);
            }

            console.log('‚úÖ Status atualizado no Supabase:', data[0]);

            // Mensagens de confirma√ß√£o
            const statusMessages = {
                'preparando': 'üîÑ Em Produ√ß√£o',
                'em_deslocamento': 'üöö Despachado para Entrega',
                'entregue': '‚úÖ Entregue com Sucesso'
            };

            const confirmationMessage = `‚úÖ *Status Atualizado por ${userName}*\n\nüìã Pedido: *${codigoPedido}*\nüë§ Cliente: ${data[0].cliente_nome}\nüìä Novo Status: *${statusMessages[status] || status}*\n‚è∞ ${new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}\n\nüîÑ *Sistema sincronizado automaticamente*`;

            // Responder ao callback
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: `‚úÖ ${statusMessages[status] || status}`,
                show_alert: false
            });

            // Enviar mensagem de confirma√ß√£o
            await bot.sendMessage(chatId, confirmationMessage, {
                parse_mode: 'Markdown',
                reply_to_message_id: messageId
            });

        } else if (callbackData.startsWith('call_')) {
            // Processar chamadas para cliente
            const parts = callbackData.split('_');
            const codigoPedido = parts[1];
            const whatsapp = parts.slice(2).join('_');

            console.log('üìû Solicita√ß√£o de contato:', { codigoPedido, whatsapp, userName });

            // Responder ao callback
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: `üìû Cliente: ${whatsapp}`,
                show_alert: true
            });

            // Enviar mensagem com informa√ß√µes de contato
            const callMessage = `üìû *Ligar para Cliente*\n\nüìã Pedido: *${codigoPedido}*\nüì± WhatsApp: \`${whatsapp}\`\nüë§ Solicitado por: ${userName}\n\n_Clique no n√∫mero acima para copiar_`;

            await bot.sendMessage(chatId, callMessage, {
                parse_mode: 'Markdown',
                reply_to_message_id: messageId
            });
        }

    } catch (error) {
        console.error('‚ùå Erro ao processar callback:', error);
        
        await bot.answerCallbackQuery(callbackQuery.id, {
            text: '‚ùå Erro ao processar a√ß√£o. Tente novamente.',
            show_alert: true
        });
    }
});

// ============= TRATAMENTO DE MENSAGENS =============

bot.on('message', (msg) => {
    // Log b√°sico de mensagens recebidas (sem spam)
    if (!msg.text?.startsWith('/')) {
        console.log(`üí¨ Mensagem de ${msg.from?.first_name || 'Desconhecido'}: ${msg.text?.substring(0, 50) || 'Sem texto'}...`);
    }
});

// ============= TRATAMENTO DE ERROS =============

bot.on('error', (error) => {
    console.error('‚ùå Erro no bot Telegram:', error.message);
    
    // Tentar reconectar ap√≥s erro
    setTimeout(() => {
        console.log('üîÑ Tentando reconectar...');
    }, 5000);
});

// Tratamento de erros n√£o capturados
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Erro n√£o capturado:', reason);
});

process.on('uncaughtException', (error) => {
    console.error('‚ùå Exce√ß√£o n√£o capturada:', error.message);
    process.exit(1);
});

// ============= INICIALIZA√á√ÉO DO SISTEMA =============

async function iniciarSistema() {
    try {
        console.log('üöÄ Iniciando sistema completo...');
        
        // Verificar conex√£o com Supabase
        const { data, error } = await supabase.from('pedidos').select('id').limit(1);
        if (error) {
            throw new Error(`Erro de conex√£o com Supabase: ${error.message}`);
        }
        console.log('‚úÖ Conex√£o com Supabase verificada');
        
        // Iniciar monitoramento de pedidos
        await monitorarNovos Pedidos();
        console.log('‚úÖ Monitoramento de pedidos ativo');
        
        // Enviar mensagem de status para o grupo
        await bot.sendMessage(TELEGRAM_CHAT_ID, 
            'ü§ñ *Bot de Pedidos Online!*\n\n' +
            '‚úÖ Sistema integrado e funcionando\n' +
            'üîÑ Monitoramento em tempo real ativo\n' +
            'üìä Pronto para receber pedidos\n\n' +
            `‚è∞ ${new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}`,
            { parse_mode: 'Markdown' }
        );
        
        console.log('üéâ Sistema iniciado com sucesso!');
        console.log('üì± Bot aguardando intera√ß√µes...');
        
    } catch (error) {
        console.error('‚ùå Erro ao iniciar sistema:', error.message);
        console.log('üîÑ Tentando novamente em 10 segundos...');
        setTimeout(iniciarSistema, 10000);
    }
}

// ============= COMANDOS ADMINISTRATIVOS =============

bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    
    const helpMessage = `ü§ñ *AJUDA - Bot de Pedidos*

*Comandos Dispon√≠veis:*
‚Ä¢ \`/start\` - Iniciar bot
‚Ä¢ \`/status\` - Ver status do sistema  
‚Ä¢ \`/test\` - Testar bot√µes
‚Ä¢ \`/help\` - Esta ajuda

*Funcionalidades:*
üîÑ Atualiza√ß√£o de status em tempo real
üì± Bot√µes interativos para controle
üìä Sincroniza√ß√£o com sistema web
üö® Alertas autom√°ticos de novos pedidos

*Fluxo de Trabalho:*
1. üìù Pedido chega automaticamente
2. üîÑ Clique "INICIAR PRODU√á√ÉO"
3. üöö Clique "DESPACHAR PEDIDO" 
4. ‚úÖ Clique "MARCAR ENTREGUE"

*Suporte:*
Em caso de problemas, verifique os logs do sistema.`;

    bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
});

// ============= INICIAR BOT =============

// Aguardar um pouco antes de iniciar para garantir que tudo est√° carregado
setTimeout(iniciarSistema, 2000);

console.log('üìã Bot configurado e aguardando inicializa√ß√£o...');

// Exportar para uso em outros m√≥dulos se necess√°rio
module.exports = { bot, supabase };